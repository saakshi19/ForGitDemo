package com.visa.training.app;
import java.util.*;
import java.io.*;

interface TwoStringPredicate{
	public Boolean isBetter(String s1, String s2);
}
interface TwoElementPredicate{
	public <T> Boolean isBetter(T first, T second);
}

class Better{
	public static String betterString(String s1, String s2,TwoStringPredicate condition) { 
		return (condition.isBetter(s1, s2)?s1:s2);
	}
	public static <T> T betterElement(T first, T second, TwoElementPredicate<T> condition) {
		return (condition.isBetter(first, second)?first:second);
		
	}
}
public class LambdaApp {
	
	public static void main(String args[]) {
		
		System.out.println(Better.betterString("hello","hi",(s1,s2)->{return s1.length()>s2.length();}));
		String words[]= {"Hi","Hello","Bye","Good"};
		System.out.println("Lambda");
		Arrays.sort((words),(String s1,String s2)->{return s1.length()-s2.length();});
		for(int i=0;i<words.length;i++) {
			System.out.println(words[i]);
		}
		
		System.out.println("");
		
		//reverse length sorting 
		Arrays.sort(words,(String s1, String s2)->{return s2.length()-s1.length();});
		for(int i =0;i<words.length;i++) {
			System.out.println(words[i]);
		}
		
		//alphabetically by the first char only
		Arrays.sort(words,(String s1, String s2)->{return s1.charAt(0)-s2.charAt(0);});
		for(int i =0;i<words.length;i++) {
			System.out.println(words[i]);
		}
		System.out.println("");
		
		//string containing e comes first
		Arrays.sort(words,(String s1,String s2)->{return (s1.contains("e") && !s2.contains("e"))?-1:1;});
		for(int i =0;i<words.length;i++) {
			System.out.println(words[i]);
		}
		
		
	}

}
